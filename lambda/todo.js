!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(s,n,function(t){return e[t]}.bind(null,n));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=3)}([function(e,t,r){e.exports=r(4)},,,function(e,t,r){"use strict";r.r(t),r.d(t,"handler",(function(){return a}));var s=r(0);const n=new(r.n(s).a);async function a(){let e=await n.coins.all(),t=await e.data;return{statusCode:200,body:JSON.stringify(t)}}},function(e,t,r){"use strict";const s=r(5),n=r(6),a=r(7),i=r(8),c=r(9);
/**
 * @class CoinGecko
 * @author Mark Miscavage <markmiscavage@protonmail.com>
 * @description A Node.js wrapper for the CoinGecko API with no dependencies. For more information, visit: https://www.coingecko.com/api/docs/v3
 * @example
 *     const CoinGecko = require('coingecko-api');
 *     const CoinGeckoClient = new CoinGecko();
 * @public
 * @version 1.0.10
 * @license MIT
 * @kind class
 */
class _{ping(){return this._request("/ping")}global(){return this._request("/global")}get coins(){return{all:(e={})=>this._request("/coins",e),list:()=>this._request("/coins/list"),markets:(e={})=>(a.isObject(e)||a._WARN_("Invalid parameter","params must be of type: Object"),a.isString(e.vs_currency)&&!a.isStringEmpty(e.vs_currency)||(e.vs_currency="usd"),a.isArray(e.ids)&&(e.ids=e.ids.join(",")),this._request("/coins/markets",e)),fetch:(e,t={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","coinId must be of type: String and greater than 0 characters.");const r="/coins/"+e;return this._request(r,t)},fetchTickers:(e,t={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","coinId must be of type: String and greater than 0 characters."),a.isArray(t.exchange_ids)&&(t.exchange_ids=t.exchange_ids.join(","));const r=`/coins/${e}/tickers`;return this._request(r,t)},fetchHistory:(e,t={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","coinId must be of type: String and greater than 0 characters."),a.isObject(t)||a._WARN_("Invalid parameter","params must be of type: Object"),a.isString(t.date)&&!a.isStringEmpty(t.date)||a._WARN_("Missing parameter","params must include `date` and be a string in format: `dd-mm-yyyy`");const r=`/coins/${e}/history`;return this._request(r,t)},fetchMarketChart:(e,t={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","coinId must be of type: String and greater than 0 characters."),a.isObject(t)||a._WARN_("Invalid parameter","params must be of type: Object"),a.isString(t.vs_currency)&&!a.isStringEmpty(t.vs_currency)||(t.vs_currency="usd"),null==t.days&&(t.days=1);const r=`/coins/${e}/market_chart`;return this._request(r,t)},fetchMarketChartRange:(e,t={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","coinId must be of type: String and greater than 0 characters."),a.isObject(t)||a._WARN_("Invalid parameter","params must be of type: Object"),a.isString(t.vs_currency)&&!a.isStringEmpty(t.vs_currency)||(t.vs_currency="usd"),a.isNumber(t.from)||a._WARN_("Missing parameter","params must include `from` and be a UNIX timestamp."),a.isNumber(t.to)||a._WARN_("Missing parameter","params must include `to` and be a UNIX timestamp.");const r=`/coins/${e}/market_chart/range`;return this._request(r,t)},fetchStatusUpdates:(e,t={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","coinId must be of type: String and greater than 0 characters.");const r=`/coins/${e}/status_updates`;return this._request(r,t)},fetchCoinContractInfo:(e,t="ethereum")=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","contractAddress must be of type: String and greater than 0 characters."),a.isString(t)&&!a.isStringEmpty(t)||a._WARN_("Invalid parameter","assetPlatform must be of type: String and greater than 0 characters.");const r=`/coins/${t}/contract/${e}`;return this._request(r)},fetchCoinContractMarketChart:(e,t="ethereum",r={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","contractAddress must be of type: String and greater than 0 characters."),a.isString(t)&&!a.isStringEmpty(t)||a._WARN_("Invalid parameter","assetPlatform must be of type: String and greater than 0 characters."),a.isObject(r)||a._WARN_("Invalid parameter","params must be of type: Object"),a.isString(r.vs_currency)&&!a.isStringEmpty(r.vs_currency)||(r.vs_currency="usd"),null==r.days&&(r.days=1);const s=`/coins/${t}/contract/${e}/market_chart`;return this._request(s,r)},fetchCoinContractMarketChartRange:(e,t="ethereum",r={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","contractAddress must be of type: String and greater than 0 characters."),a.isString(t)&&!a.isStringEmpty(t)||a._WARN_("Invalid parameter","assetPlatform must be of type: String and greater than 0 characters."),a.isObject(r)||a._WARN_("Invalid parameter","params must be of type: Object"),a.isString(r.vs_currency)&&!a.isStringEmpty(r.vs_currency)||(r.vs_currency="usd"),null==r.days&&(r.days=1);const s=`/coins/${t}/contract/${e}/market_chart/range`;return this._request(s,r)}}}get exchanges(){return{all:()=>this._request("/exchanges"),list:()=>this._request("/exchanges/list"),fetch:e=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","exchangeId must be of type: String and greater than 0 characters.");const t="/exchanges/"+e;return this._request(t)},fetchTickers:(e,t={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","exchangeId must be of type: String and greater than 0 characters."),a.isArray(t.coin_ids)&&(t.coin_ids=t.coin_ids.join(","));const r=`/exchanges/${e}/tickers`;return this._request(r,t)},fetchStatusUpdates:(e,t={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","exchangeId must be of type: String and greater than 0 characters.");const r=`/exchanges/${e}/status_updates`;return this._request(r,t)},fetchVolumeChart:(e,t={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","exchangeId must be of type: String and greater than 0 characters.");const r=`/exchanges/${e}/volume_chart`;return this._request(r,t)}}}get statusUpdates(){return{all:(e={})=>this._request("/status_updates",e)}}get events(){return{all:(e={})=>this._request("/events",e),fetchCountries:()=>this._request("/events/countries"),fetchTypes:()=>this._request("/events/types")}}get exchangeRates(){return{all:()=>this._request("/exchange_rates")}}get simple(){return{price:(e={})=>{a.isObject(e)||a._WARN_("Invalid parameter","params must be of type: Object"),a.isArray(e.vs_currencies)&&(e.vs_currencies=e.vs_currencies.join(",")),a.isString(e.vs_currencies)&&!a.isStringEmpty(e.vs_currencies)||(e.vs_currencies="usd"),a.isArray(e.ids)&&(e.ids=e.ids.join(",")),a.isString(e.ids)&&!a.isStringEmpty(e.ids)||a._WARN_("Invalid parameter","params.ids must be of type: String or Array and greater than 0 characters.");return this._request("/simple/price",e)},supportedVsCurrencies:()=>this._request("/simple/supported_vs_currencies"),fetchTokenPrice:(e={},t="ethereum")=>{a.isObject(e)||a._WARN_("Invalid parameter","params must be of type: Object"),a.isString(t)&&!a.isStringEmpty(t)||a._WARN_("Invalid parameter","assetPlatform must be of type: String and greater than 0 characters."),e.contract_addresses||a._WARN_("Missing parameter","params must include `contract_addresses` and be a of type: String or Object"),e.vs_currencies||a._WARN_("Missing parameter","params must include `vs_currencies` and be a of type: String or Object"),a.isArray(e.contract_addresses)&&(e.contract_addresses=e.contract_addresses.join(",")),a.isArray(e.vs_currencies)&&(e.vs_currencies=e.vs_currencies.join(","));const r="/simple/token_price/"+t;return this._request(r,e)}}}get finance(){return{fetchPlatforms:(e={})=>this._request("/finance_platforms",e),fetchProducts:(e={})=>this._request("/finance_products",e)}}get indexes(){return{all:(e={})=>this._request("/indexes",e),fetch:e=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","indexId must be of type: String and greater than 0 characters.");const t="/indexes/"+e;return this._request(t)},list:()=>this._request("/indexes/list")}}get derivatives(){return{fetchTickers:()=>this._request("/derivatives"),allExchanges:(e={})=>this._request("/derivatives/exchanges",e),fetchExchange:(e,t={})=>{a.isString(e)&&!a.isStringEmpty(e)||a._WARN_("Invalid parameter","exchangeId must be of type: String and greater than 0 characters.");const r="/derivatives/exchanges/"+e;return this._request(r,t)},listExchanges:()=>this._request("/derivatives/exchanges/list")}}_buildRequestOptions(e,t){return{path:e=null==(t=a.isObject(t)?n.stringify(t):void 0)?`/api/v${i.API_VERSION}${e}`:`/api/v${i.API_VERSION}${e}?${t}`,method:"GET",host:i.HOST,port:443,timeout:_.TIMEOUT}}_request(e,t){let r=this._buildRequestOptions(e,t);return new Promise((e,t)=>{let n=s.request(r,r=>{let s=[];r.on("data",e=>{s.push(e)}),r.on("end",()=>{try{s=Buffer.concat(s),s=s.toString(),s.startsWith("<!DOCTYPE html>")?a._WARN_("Invalid request","There was a problem with your request. The parameter(s) you gave are missing or incorrect."):s.startsWith("Throttled")&&a._WARN_("Throttled request","There was a problem with request limit."),s=JSON.parse(s)}catch(e){t(e)}e(c(!(r.statusCode<200||r.statusCode>=300),r.statusMessage,r.statusCode,s))})});n.on("error",e=>t(e)),n.on("timeout",()=>{n.abort(),t(new Error(`CoinGecko API request timed out. Current timeout is: ${_.TIMEOUT} milliseconds`))}),n.end()})}}_.API_VERSION=i.API_VERSION,_.REQUESTS_PER_SECOND=i.REQUESTS_PER_SECOND,_.ORDER=i.ORDER,_.STATUS_UPDATE_CATEGORY=i.STATUS_UPDATE_CATEGORY,_.STATUS_UPDATE_PROJECT_TYPE=i.STATUS_UPDATE_PROJECT_TYPE,_.EVENT_TYPE=i.EVENT_TYPE,_.TIMEOUT=i.TIMEOUT,e.exports=_},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("querystring")},function(e,t){const r=e=>"string"==typeof e||e instanceof String,s=e=>!r(e)&&!n(e)&&null!=e&&null!=e&&(e&&"[object Date]"===Object.prototype.toString.call(e)&&!isNaN(e)),n=e=>Array.isArray(e);e.exports={isString:r,isStringEmpty:e=>!!r(e)&&0==e.length,isDate:s,isObject:e=>!n(e)&&!s(e)&&(null!==e&&"object"==typeof e),isNumber:e=>!isNaN(e)&&!isNaN(parseInt(e)),isArray:n,_WARN_:(e="",t="")=>(process.emitWarning(e,{detail:t,code:"CoinGecko"}),!0)}},function(e,t){const r="https://api.coingecko.com/api/";e.exports={BASE:r,HOST:"api.coingecko.com",API_VERSION:"3",URI:"https://api.coingecko.com/api/v3",REQUESTS_PER_SECOND:10,ORDER:{GECKO_ASC:"gecko_asc",GECKO_DESC:"gecko_desc",MARKET_CAP_ASC:"market_cap_asc",MARKET_CAP_DESC:"market_cap_desc",VOLUME_ASC:"volume_asc",VOLUME_DESC:"volume_desc",COIN_NAME_ASC:"coin_name_asc",COIN_NAME_DESC:"coin_name_desc",PRICE_ASC:"price_asc",PRICE_DESC:"price_desc",HOUR_24_ASC:"h24_change_asc",HOUR_24_DESC:"h24_change_desc",TRUST_SCORE_DESC:"trust_score_desc",NAME_ASC:"name_asc",NAME_DESC:"name_desc",OPEN_INTEREST_BTC_ASC:"open_interest_btc_asc",OPEN_INTEREST_BTC_DESC:"open_interest_btc_desc",TRADE_VOLUME_24H_BTC_ASC:"trade_volume_24h_btc_asc",TRADE_VOLUME_24H_BTC_DESC:"trade_volume_24h_btc_desc"},STATUS_UPDATE_CATEGORY:{GENERAL:"general",MILESTONE:"milestone",PARTNERSHIP:"partnership",EXCHANGE_LISTING:"exchange_listing",SOFTWARE_RELEASE:"software_release",FUND_MOVEMENT:"fund_movement",NEW_LISTINGS:"new_listings",EVENT:"event"},STATUS_UPDATE_PROJECT_TYPE:{COIN:"coin",MARKET:"market"},EVENT_TYPE:{EVENT:"Event",CONFERENCE:"Conference",MEETUP:"Meetup"},TIMEOUT:3e4}},function(e,t){e.exports=(e,t,r,s)=>({success:e,message:t,code:r,data:s})}]));